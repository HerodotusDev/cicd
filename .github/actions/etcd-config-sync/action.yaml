name: 'Fetch ETCD Config and Create ConfigMap'
description: 'Fetch configuration from an external ETCD instance and create a Kubernetes ConfigMap'

inputs:
  etcd_host:
    description: 'ETCD endpoint)'
    required: true
  etcd_user:
    description: 'ETCD username'
    required: true
  etcd_password:
    description: 'ETCD password'
    required: true
  etcd_key:
    description: 'ETCD key to fetch'
    required: true
  namespace:
    description: 'Kubernetes namespace for the ConfigMap'
    required: false
    default: 'default'
  app_name:
    description: 'Its the app name'
    required: false


runs:
  using: "composite"
  steps:
    - name: Install etcdctl
      shell: bash
      run: |
        ETCD_VERSION="v3.5.5"
        curl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz -o etcd.tar.gz
        tar xzvf etcd.tar.gz
        sudo mv etcd-${ETCD_VERSION}-linux-amd64/etcdctl /usr/local/bin/
        rm -rf etcd.tar.gz etcd-${ETCD_VERSION}-linux-amd64
        etcdctl version  # Verify installation

    - name: Fetch ETCD Config
      id: fetch
      shell: bash
      run: |
        OUTPUT=$(ETCDCTL_API=3 etcdctl \
          --endpoints="${{ inputs.etcd_host }}" \
          --user "${{ inputs.etcd_user }}:${{ inputs.etcd_password }}" \
          get "${{ inputs.etcd_key }}" --print-value-only)

        echo "$OUTPUT" > etcd_values.env
        echo "CONFIG_VALUES=$(cat etcd_values.env | base64 -w0)" >> $GITHUB_ENV  # Encode for safety

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: "v1.32.0"

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ inputs.kube_config }}" > ~/.kube/config

      shell: bash        
      
    - name: Create Kubernetes Secret
      shell: bash
      run: |
        # Decode and store values in a temp file
        echo "${{ env.CONFIG_VALUES }}" | base64 -d > etcd_values.env
        
        # Prepare key-value pairs for Secret
        SECRET_DATA=""
        while IFS='=' read -r key value; do
          if [[ ! -z "$key" && ! -z "$value" ]]; then
            ENCODED_VALUE=$(echo -n "$value" | base64 -w0)  # Base64 encode value
            SECRET_DATA+="  $key: $ENCODED_VALUE\n"
          fi
        done < etcd_values.env

        # Create Secret YAML
        cat <<EOF > secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${{ inputs.app_name }}-secret
          namespace: ${{ inputs.namespace }}
        type: Opaque
        data:
        $SECRET_DATA
        EOF

        # Apply Secret
        kubectl apply -f secret.yaml
