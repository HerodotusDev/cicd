name: 'Fetch ETCD Config and Create Secret'
description: 'Fetch configuration from an external ETCD instance and create a Kubernetes Secret'

inputs:
  etcd_host:
    description: 'ETCD endpoint'
    required: false
    default: http://etcd.etcd.svc.cluster.local:2379
  etcd_user:
    description: 'ETCD username'
    required: true
  etcd_password:
    description: 'ETCD password'
    required: true
  etcd_key:
    description: 'ETCD key to fetch'
    required: true
  etcd_root:
    description: 'ETCD root path'
    required: true
    default: ""
  namespace:
    description: 'Kubernetes namespace for the Secret'
    required: false
    default: ''
  app_name:
    description: 'Application name'
    required: true
  service_account_token:
    description: "Service account token for Kubernetes authentication."
    required: true

outputs:
  no_key:
    description: "Whether no ETCD key was found"
    value: ${{ steps.pull.outputs.no_key }}
  secret_changed:
    description: "Whether the secret content has changed"
    value: ${{ steps.check_secret_change.outputs.changed }}
  secret_hash:
    description: "Hash of the secret content"
    value: ${{ steps.compute_hash.outputs.hash }}

runs:
  using: "composite"
  steps:
    - name: Pull and Run Secret Preparation Container
      id: pull
      continue-on-error: true
      env:
        etcd_root_override: ${{ inputs.etcd_root == '' && env.namespace || inputs.etcd_root }}
      shell: bash
      run: |
        set -e
        docker run --rm \
          -e ETCD_HOST="${{ inputs.etcd_host }}" \
          -e ETCD_USER="${{ inputs.etcd_user }}" \
          -e ETCD_PASSWORD="${{ inputs.etcd_password }}" \
          -e ETCD_KEY="/${{ env.etcd_root_override }}/${{ inputs.app_name }}/envs/${{ inputs.etcd_key }}" \
          -e APP_NAME="${{ inputs.app_name }}" \
          -e NAMESPACE="${{ inputs.namespace }}" \
          -v "${{ github.workspace }}/output:/output" \
          dataprocessor/etcd-pull:0.2 || true

        if [ ! -s "${{ github.workspace }}/output/secret.yaml" ]; then
          echo "there was no key"
          echo "no_key=true" >> $GITHUB_OUTPUT
        else
          echo "no_key=false" >> $GITHUB_OUTPUT
        fi

    - name: Change Ownership of Output Files
      if: steps.pull.outputs.no_key == 'false'
      shell: bash
      run: sudo chown -R "$(whoami):$(whoami)" "${{ github.workspace }}/output"

    - name: Set up kubectl
      if: steps.pull.outputs.no_key == 'false'
      uses: azure/setup-kubectl@v4
      with:
        version: "v1.32.0"

    - name: Compute Secret Hash
      id: compute_hash
      if: steps.pull.outputs.no_key == 'false'
      shell: bash
      run: |
        HASH=$(sha256sum "${{ github.workspace }}/output/secret.yaml" | awk '{print $1}')
        echo "hash=$HASH" >> $GITHUB_OUTPUT

    - name: Check Previous Secret Hash
      id: check_secret_change
      if: steps.pull.outputs.no_key == 'false'
      shell: bash
      run: |
        if kubectl get secret "${{ inputs.app_name }}-secret" -n "${{ inputs.namespace }}" &>/dev/null; then
          CURRENT_HASH=$(kubectl get secret "${{ inputs.app_name }}-secret" -n "${{ inputs.namespace }}" -o jsonpath='{.metadata.annotations.secret-hash}' 2>/dev/null || echo "")
          if [ -z "$CURRENT_HASH" ]; then
            echo "Secret exists but has no hash annotation - marking as changed"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            NEW_HASH="${{ steps.compute_hash.outputs.hash }}"
            if [ "$CURRENT_HASH" != "$NEW_HASH" ]; then
              echo "Secret hash changed from $CURRENT_HASH to $NEW_HASH"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "Secret hash unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "Secret doesn't exist - marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Add Hash Annotation to Secret
      if: steps.pull.outputs.no_key == 'false'
      shell: bash
      run: |
        sed -i "/metadata:/a\\  annotations:\\n    secret-hash: ${{ steps.compute_hash.outputs.hash }}" "${{ github.workspace }}/output/secret.yaml"

    - name: Apply Kubernetes Secret
      if: steps.pull.outputs.no_key == 'false'
      shell: bash
      run: kubectl apply -f "${{ github.workspace }}/output/secret.yaml"
