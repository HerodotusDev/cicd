# .github/actions/k8s-deploy/action.yml
name: "Deploy on K8s"
description: "Deploys Kubernetes resources using kubectl."
inputs:
  service_account_token:
    description: "Service account token for Kubernetes authentication."
    required: true
  cluster_url:
    description: "Kubernetes API server URL."
    required: true
  namespace:
    description: "Kubernetes namespace to deploy to."
    required: true
  deployment_file:
    description: "Path to the deployment YAML file."
    required: true
  ingress_file:
    description: "Path to the ingress YAML file."
    required: true
  rollout_timeout:
    description: "Rollout timeout for the deployment (e.g., 500s)."
    required: false
    default: "500"
  image_tag:
    description: "Image tag to deployed."
    required: true
    default: latest
  dockerhub_project:
    description: "The Docker Hub project (or organization/repository prefix) (e.g. myorg)"
    required: true
  app_name:
    description: "The application name to form the image name."
    required: true    
  secret_changed:
    description: "Whether the secret has changed and deployment needs restart"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: "v1.32.0"

    - name: Deploy ConfigMap (from files if any exist)
      shell: bash
      run: |
        CONFIGMAP_DIR="./k8s/${{ env.k8s_env }}/${{ matrix.app }}-configmap"
        CM_NAME="${{ matrix.app }}-configmap"
    
        if [ -d "$CONFIGMAP_DIR" ] && [ "$(ls -A "$CONFIGMAP_DIR")" ]; then
          kubectl create configmap "$CM_NAME" \
            --namespace "${{ env.namespace }}" \
            $(for f in "$CONFIGMAP_DIR"/*; do echo --from-file="$f"; done)
        else
          echo "No files in $CONFIGMAP_DIR, skipping ConfigMap creation."
        fi           

    - name: Update deployment YAML with image tag
      run: |
        sed -i "s|<IMAGE>|${{ inputs.dockerhub_project }}/${{ github.ref_name != 'gcp-main' && 'stg-' || '' }}${{ inputs.app_name }}:${{ inputs.image_tag }}|g" "${{ inputs.deployment_file }}"
      shell: bash
      
    - name: Deploy Deployment YAML (if exists)
      run: |
        if [ -f "${{ inputs.deployment_file }}" ]; then
          echo "Deployment file exists. Applying manifest..."
          kubectl apply --namespace "${{ inputs.namespace }}" -f "${{ inputs.deployment_file }}"
        else
          echo "No Deployment file found. Skipping deployment."
        fi
      shell: bash

    - name: Deploy Ingress YAML (if exists)
      run: |
        if [ -f "${{ inputs.ingress_file }}" ]; then
          echo "Ingress file exists. Applying manifest..."
          kubectl apply --namespace "${{ inputs.namespace }}" -f "${{ inputs.ingress_file }}"
        else
          echo "No Ingress file found. Skipping deployment."
        fi
      shell: bash

    - name: Wait for deployment apply to complete
      run: |
        kubectl rollout status deployment/"${{ inputs.app_name }}" --namespace "${{ inputs.namespace }}" --timeout=${{ inputs.rollout_timeout }}s
      shell: bash

    - name: Restart Deployment if Secret Changed
      if: inputs.secret_changed == 'true'
      run: |
        echo "Secret changed - restarting deployment..."
        kubectl rollout restart deployment/${{ inputs.app_name }} -n ${{ inputs.namespace }}
      shell: bash

    - name: Wait for restart to complete
      if: inputs.secret_changed == 'true'
      run: |
        kubectl rollout status deployment/"${{ inputs.app_name }}" --namespace "${{ inputs.namespace }}" --timeout=${{ inputs.rollout_timeout }}s
      shell: bash