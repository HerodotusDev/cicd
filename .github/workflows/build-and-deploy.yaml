name: Build & deploy 

on:
  workflow_call:

env:
  rollout_timeout: 500
  version_file: ./package.json
  version_key:
  inputs_files: ./k8s/cicd-inputs.yaml
  dockerhub_project: dataprocessor

permissions:
  contents: write

jobs:
  define-matrix:
    runs-on: gcp-arc-runners
    outputs:
      matrix_apps: ${{ steps.build-matrix.outputs.matrix_apps }}
      matrix_init: ${{ steps.build-matrix.outputs.matrix_init }}
      app_versions: ${{ steps.build-matrix.outputs.app_versions }}
      primary_version: ${{ steps.build-matrix.outputs.primary_version }}
      unique_versions: ${{ steps.build-matrix.outputs.unique_versions }}
      should_tag: ${{ steps.build-matrix.outputs.should_tag }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Build app matrix metadata
        id: build-matrix
        uses: HerodotusDev/cicd/.github/actions/build-matrix@main
        with:
          app_matrix: ${{ steps.load-inputs.outputs.app_matrix }}
          app_names: ${{ steps.load-inputs.outputs.app_names }}
          init_pods: ${{ env.init_pods }}
          default_version_file: ${{ env.version_file }}
          default_version_key: ${{ env.version_key }}

  build-and-push-image:
    needs: [define-matrix]
    runs-on: gcp-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_apps) }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Build and push image
        uses: HerodotusDev/cicd/.github/actions/build-and-push-image@main
        with:
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app.name }}
          version: ${{ fromJson(needs.define-matrix.outputs.app_versions)[matrix.app.name] }}
          docker_username: ${{ env.ARC_DOCKER_USERNAME }}
          docker_password: ${{ env.ARC_DOCKER_PASSWORD }}
          dockerfile: ${{ github.repository == 'HerodotusDev/backend' && 'storage-proofs' || matrix.app.dockerfile }}
          context: ${{ matrix.app.context }}

  build-and-push-init:
    needs: [define-matrix]
    runs-on: gcp-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_init) }}
    steps:
      - name: Skip init pod build
        if: ${{ matrix.app == '__no_init__' }}
        run: echo "No init pods requested. Skipping build-and-push-init job."

      - name: Checkout Caller Repository
        if: ${{ matrix.app != '__no_init__' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-init-inputs
        if: ${{ matrix.app != '__no_init__' }}
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Build and push init image
        if: ${{ matrix.app != '__no_init__' }}
        uses: HerodotusDev/cicd/.github/actions/build-and-push-image@main
        with:
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app }}
          version: ${{ needs.define-matrix.outputs.primary_version }}
          docker_username: ${{ env.ARC_DOCKER_USERNAME }}
          docker_password: ${{ env.ARC_DOCKER_PASSWORD }}
          dockerfile: ${{ github.repository == 'HerodotusDev/backend' && 'storage-proofs' || matrix.app }}

  create-git-tag:
    needs: [define-matrix, build-and-push-image]
    if: ${{ needs.define-matrix.outputs.should_tag == 'true' }}
    runs-on: gcp-arc-runners
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Create Git tag
        uses: HerodotusDev/cicd/.github/actions/create-git-tag@main
        with:
          tag: ${{ needs.define-matrix.outputs.primary_version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-init-pods:
    needs: [define-matrix, create-git-tag, build-and-push-image, build-and-push-init]
    runs-on: gcp-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_init) }}
    steps:
      - name: Skip deploy init pods
        if: ${{ matrix.app == '__no_init__' }}
        run: echo "No init pods requested. Skipping deploy-init-pods job."

      - name: Checkout Caller Repository
        if: ${{ matrix.app != '__no_init__' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        if: ${{ matrix.app != '__no_init__' }}
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Deploy init pod
        if: ${{ matrix.app != '__no_init__' }}
        uses: HerodotusDev/cicd/.github/actions/deploy-init-to-k8s@main
        with:
          namespace: ${{ env.namespace }}
          pod_manifest: ./k8s/${{ env.k8s_env }}/${{ matrix.app }}-pod.yaml
          rollout_timeout: ${{ env.rollout_timeout }}
          image_tag: ${{ needs.define-matrix.outputs.primary_version }}
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app }}

  deploy:
    needs: [define-matrix, create-git-tag, build-and-push-image, deploy-init-pods]
    runs-on: gcp-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_apps) }}
    outputs:
      config_changed: ${{ steps.pull_config.outputs.config_changed == 'true' || steps.ensure_configmap.outputs.config_changed == 'true' }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ${{ env.inputs_files }}

      - name: Ensure ConfigMap from files
        id: ensure_configmap
        uses: HerodotusDev/cicd/.github/actions/create-configmap@main
        with:
          namespace: ${{ env.namespace }}
          app_name: ${{ matrix.app.name }}
          k8s_env: ${{ env.k8s_env }}

      - name: Pull  config from etcd
        id: pull_config
        uses: HerodotusDev/cicd/.github/actions/pull-etcd-config@main
        with:
          namespace: ${{ env.namespace }}
          app_name: ${{ matrix.app.etcd_name }}
          etcd_user: ${{ env.ARC_ETCD_USER }}
          etcd_password: ${{ env.ARC_ETCD_PASSWORD }}
          etcd_root: ${{ env.etcd_root || env.repo_name }}
          k8s_env: ${{ env.k8s_env }}

      - name: Deploy to Kubernetes
        uses: HerodotusDev/cicd/.github/actions/deploy-to-k8s@main
        with:
          namespace: ${{ env.namespace }}
          deployment_file: ./k8s/${{ env.k8s_env }}/${{ matrix.app.manifest_name }}-deployment.yaml
          ingress_file: ./k8s/${{ env.k8s_env }}/${{ matrix.app.manifest_name }}-ingress.yaml
          rollout_timeout: ${{ env.rollout_timeout }}
          image_tag: ${{ fromJson(needs.define-matrix.outputs.app_versions)[matrix.app.name] }}
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app.name }}
          config_changed: ${{ steps.pull_config.outputs.config_changed == 'true' || steps.ensure_configmap.outputs.config_changed == 'true' }}
