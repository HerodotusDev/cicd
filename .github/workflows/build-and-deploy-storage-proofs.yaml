name: Build & deploy 

on:
  workflow_call:
    inputs:    
      k8s_env:
        type: string
        required: false  
        default: stage

env:
  rollout_timeout: 300       
  version_file: ./package.json  
  
permissions:
  contents: write

jobs:
  define-matrix:
    runs-on: hero-arc-runners
    outputs:
      matrix_apps: ${{ steps.define-matrix.outputs.matrix_apps }}
      matrix_init: ${{ steps.define-matrix-init.outputs.matrix_init }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load App Names
        id: load-app-names
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml

      - name: Define apps matrix
        id: define-matrix
        run: |
          echo 'matrix_apps=${{ env.app_names }}' >> "$GITHUB_OUTPUT"

      - name: Define apps matrix
        id: define-matrix-init
        run: |
          echo 'matrix_init=${{ env.init_pods }}' >> "$GITHUB_OUTPUT"          

  siren:
    runs-on: hero-arc-runners
    if: false
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.ARC_DOCKER_USERNAME }}
          password: ${{ env.ARC_DOCKER_PASSWORD }}

      - name: Pull Siren Image from Registry
        run: docker pull ${{ inputs.siren_image }}

      - name: Run Siren Check
        run: |
          docker run --rm ${{ inputs.siren_image }} || exit 1
        shell: bash

  version:
    outputs:
      version: ${{ steps.version.outputs.version }}
    runs-on: hero-arc-runners
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml

      - name: Extract Version
        uses: HerodotusDev/cicd/.github/actions/extract-version@main
        id: version
        with:
          file: ${{ env.version_file }}

  build-and-push-image:
    needs: [define-matrix, version]
    runs-on: hero-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_apps) }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml

      - name: Build and push image
        uses: HerodotusDev/cicd/.github/actions/build-and-push-image@main
        with:
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app }}
          version: ${{ needs.version.outputs.version }}
          docker_username: ${{ env.ARC_DOCKER_USERNAME }}
          docker_password: ${{ env.ARC_DOCKER_PASSWORD }}
          dockerfile: ./docker/Dockerfile.storage-proofs        

  create-git-tag:
    needs: [version, build-and-push-image]
    runs-on: hero-arc-runners 
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml

      - name: Create Git tag
        uses: HerodotusDev/cicd/.github/actions/create-git-tag@main
        with:
          tag: ${{ needs.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-init-pods:
    needs: [define-matrix, version, create-git-tag, build-and-push-image]
    runs-on: hero-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_init) }}
    if: ${{ needs.define-matrix.outputs.matrix_init != '' }}

    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}  
                  
      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml          

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.32.0"

      - name: Update deployment YAML with image tag
        run: |
          sed -i "s|<IMAGE>|${{ env.dockerhub_project }}/${{ matrix.app }}:${{ needs.version.outputs.version }}|g" "./k8s/${{ inputs.k8s_env }}/${{ matrix.app }}-pod.yaml"
        shell: bash
          
      - name: Delete pod if it exists
        shell: bash
        run: |
          POD="${{ matrix.app }}"
          if kubectl get pod "$POD" -n "${{ env.namespace }}" | grep -q&> /dev/null; then
            echo "Deleting pod $POD"
            kubectl delete pod "$POD" -n "${{ env.namespace }}" 
          else
            echo "Pod $POD not found, skipping."
          fi

      - name: Deploy Deployment YAML (if exists)
        run: |
          if [ -f "./k8s/${{ inputs.k8s_env }}/${{ matrix.app }}-pod.yaml" ]; then
            echo "Deployment file exists. Applying manifest..."
            kubectl apply --namespace "${{ env.namespace }}" -f "./k8s/${{ inputs.k8s_env }}/${{ matrix.app }}-pod.yaml"
          else
            echo "No Deployment file found. Skipping deployment."
          fi
        shell: bash   

      - name: Wait for Pod to complete
        run: |
          kubectl wait \
            --for=jsonpath='{.status.phase}'=Succeeded \
            pod/${{ matrix.app}} \
            --namespace "${{ env.namespace }}" \
            --timeout=${{ env.rollout_timeout }}s
        shell: bash
        
  deploy-staging:
    needs: [define-matrix, version, create-git-tag, build-and-push-image, deploy-init-pods]
    runs-on: hero-arc-runners
    strategy:
      matrix:
        app: ${{ fromJson(needs.define-matrix.outputs.matrix_apps) }}
    if: always()
    outputs:
      secret_changed: ${{ steps.pull_config.outputs.secret_changed }}
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Inputs from YAML
        id: load-inputs
        uses: HerodotusDev/cicd/.github/actions/load-inputs@main
        with:
          inputs_file: ./k8s/${{ inputs.k8s_env }}/cicd-inputs.yaml

      - name: Pull config from etcd
        id: pull_config
        uses: HerodotusDev/cicd/.github/actions/pull-etcd-config@storageproofs
        if: ${{ env.pull_etcd_config == 'true' }}
        with:
          namespace: ${{ env.namespace }}
          app_name: storage-proofs
          etcd_user: ${{ env.ARC_ETCD_USER }}
          etcd_password: ${{ env.ARC_ETCD_PASSWORD }}
          etcd_key: ${{ env.etcd_key }}       

      - name: Deploy to Kubernetes
        uses: HerodotusDev/cicd/.github/actions/deploy-to-k8s@main
        with:
          namespace: ${{ env.namespace }}
          deployment_file: ./k8s/${{ inputs.k8s_env }}/${{ matrix.app }}-deployment.yaml
          ingress_file: ./k8s/${{ inputs.k8s_env }}/${{ matrix.app }}-ingress.yaml
          rollout_timeout: ${{ env.rollout_timeout }}
          image_tag: ${{ needs.version.outputs.version }}
          dockerhub_project: ${{ env.dockerhub_project }}
          app_name: ${{ matrix.app }}
          secret_changed: ${{ steps.pull_config.outputs.secret_changed }} 